import json
import requests
from typing import  List
from .input_scanners import Scanner, ScannerResult

REMOTE_TS_API_ADDRESS = 'https://api.testsavant.ai'

REQUEST_JSON = """
{
    "prompt": "{PROMPT}",
    "config": {
        "project_id": "{PROJECT_ID}",
        "fail_fast": true,
        "cache": {
            "enabled": true,
            "ttl": 3600
        }
    },
    "use": [{SCANNERS}],
}
""".replace('\n', ' ')


class TSGuard:
    
    def __init__(self, API_KEY, PROJECT_ID, remote_addr=REMOTE_TS_API_ADDRESS, fail_fast=True):
        """        
        scan_mode : str
            "input": analyzes prompts sent to the llm
            "output": analyzes responses generated by the llm
        
        remote_addr : str, optional
            Base URL for the remote API endpoint.
            Default is https://api.testsavant.ai
        """
        self.API_KEY = API_KEY
        self.PROJECT_ID = PROJECT_ID
        self.fail_fast = fail_fast
        self.scanners: List[Scanner] = None
        self.remote_addr = remote_addr
    
    def add_scanner(self, scanner: Scanner):
        if self.scanners is None:
            self.scanners = []
        self.scanners.append(scanner)

    def _prepare_request_json(self, prompt, project_id, scanners: List[Scanner], output = None):
        req_dict = {
            "prompt": prompt,
            "config": {
                "project_id": project_id,
                "fail_fast": self.fail_fast,
                "cache": {
                    "enabled": True,
                    "ttl": 3600
                }  
            },
            "use": [scanner.to_dict(request_only=True) for scanner in scanners]
        }
        if output:
            req_dict["output"] = output
        return req_dict

    def make_request(self, data):
        response = requests.post(
            self.remote_addr,
            headers={
                'x-api-key': self.API_KEY,
                'Content-Type': 'application/json'
            },
            data=data
        )
        if response.status_code != 200:
            raise Exception(f"Request failed with status code {response.status_code}")
        
        response_json = response.json()
        return ScannerResult(**response_json)

class TSGuardInput(TSGuard):
    def __init__(self, API_KEY, PROJECT_ID, remote_addr=REMOTE_TS_API_ADDRESS, fail_fast=True):
        super().__init__(API_KEY, PROJECT_ID, remote_addr,fail_fast=fail_fast)
        self.remote_addr = remote_addr + "/guard/unified-input"
        
    def scan(self, prompt):
        if self.scanners is None or len(self.scanners) == 0:
            raise ValueError("No scanners have been added.")
        if not prompt:
            raise ValueError("Output must be provided for output scanning.")
        request_body = self._prepare_request_json(prompt, self.PROJECT_ID, self.scanners)
        return self.make_request(json.dumps(request_body))
    
class TSGuardOutput(TSGuard):
    def __init__(self, API_KEY, PROJECT_ID, remote_addr=REMOTE_TS_API_ADDRESS, fail_fast=True):
        super().__init__(API_KEY, PROJECT_ID, remote_addr,fail_fast=fail_fast)
        self.remote_addr = remote_addr + "/guard/unified-output"
        
    def scan(self, prompt, output):
        if self.scanners is None or len(self.scanners) == 0:
            raise ValueError("No scanners have been added.")
        if not prompt and not output:
            raise ValueError("prompt and Output must be provided for output scanning.")
        request_body = self._prepare_request_json(prompt, self.PROJECT_ID, self.scanners, output=output)
        return self.make_request(json.dumps(request_body))  
