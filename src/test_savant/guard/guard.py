import json
import requests
from typing import  List, Dict
from .input_scanners import Scanner, ScannerResult
import os
import asyncio
import inspect
from typing import Any, Awaitable, Callable, Dict, Optional, Union
import httpx

Callback = Callable[[ScannerResult], Union[None, Awaitable[None]]]

REMOTE_TS_API_ADDRESS = 'https://api.testsavant.ai'

REQUEST_JSON = """
{
    "prompt": "{PROMPT}",
    "config": {
        "project_id": "{PROJECT_ID}",
        "fail_fast": true,
        "cache": {
            "enabled": true,
            "ttl": 3600
        }
    },
    "use": [{SCANNERS}],
}
""".replace('\n', ' ')


class Guard:
    
    def __init__(self, API_KEY, PROJECT_ID, remote_addr=REMOTE_TS_API_ADDRESS, fail_fast=True):
        """        
        scan_mode : str
            "input": analyzes prompts sent to the llm
            "output": analyzes responses generated by the llm
        
        remote_addr : str, optional
            Base URL for the remote API endpoint.
            Default is https://api.testsavant.ai
        """
        self.API_KEY = API_KEY
        self.PROJECT_ID = PROJECT_ID
        self.fail_fast = fail_fast
        self.scanners: List[Scanner] = None
        self.remote_addr = remote_addr
    
    def add_scanner(self, scanner: Scanner):
        if self.scanners is None:
            self.scanners = []
        self.scanners.append(scanner)

    def _scanners_to_dict(self, scanners: List[Scanner], request_only=False, multimodal=False):
        if scanners is None or len(scanners) == 0:
            raise ValueError("No scanners have been added.")
        scanners_dict = []
        requires_input = set()
        for scanner in scanners:
            if not multimodal and "Image" in scanner.__class__.__name__:
                continue
            scanners_dict.append(scanner.to_dict(request_only=request_only))
            if hasattr(scanner, '_requires_input_prompt') and scanner._requires_input_prompt:
                requires_input.add(scanner.__class__.__name__)
        return scanners_dict, requires_input

    def _prepare_request_json(self, prompt, project_id, scanners: Dict, output = None, multimodal=False):
        req_dict = {
            "prompt": prompt,
            "config": {
                "project_id": project_id,
                "fail_fast": self.fail_fast,
                "cache": {
                    "enabled": True,
                    "ttl": 3600
                }  
            },
            "use": scanners
        }
        if output:
            req_dict["output"] = output
        return req_dict
    
    def make_request(self, data, url: str, files: List[str]=None, async_mode: bool = False, callback: Optional[Callback] = None):
        if files is not None and len(files) > 0:
            return self.make_multimodal_request(data, url, files, async_mode=async_mode, callback=callback)
        else:
            return self.make_text_request(data, url, async_mode=async_mode, callback=callback)

    def make_text_request(self, data, url: str, async_mode: bool = False, callback: Optional[Callback] = None):
        if async_mode:
            return self.request_api(
                url,
                data=data,
                headers={
                    'x-api-key': self.API_KEY,
                    'Content-Type': 'application/json'
                },
                async_mode=True,
                callback=callback
            )
        response = requests.post(
            url,
            headers={
                'x-api-key': self.API_KEY,
                'Content-Type': 'application/json'
            },
            data=data
        )
        if response.status_code != 200:
            raise Exception(f"Request failed with status code {response.status_code}")
        
        response_json = response.json()
        return ScannerResult(**response_json)
    
    def make_multimodal_request(self, data, url: str, files: List[str], async_mode: bool = False, callback: Optional[Callback] = None):
        # enure files is not None and is a list of file paths
        if files is None or len(files) == 0:
            raise ValueError("Files must be provided for multi-modal scanning.")
        payload = {
            'metadata': data
        }
        
        payload_files = []
        for file_path in files:
            
            if not os.path.exists(file_path):
                raise ValueError(f"File {file_path} does not exist.")
            
            if not file_path.lower().endswith(('.png', '.jpg', '.jpeg')):
                raise ValueError(f"File {file_path} is not a valid image type.")
            image_type = 'image/jpeg' if file_path.lower().endswith(('.jpg', '.jpeg')) else 'image/png'
            file_name = os.path.basename(file_path)
            payload_files.append(('images', (file_name, open(file_path, 'rb'), image_type)))
        
        if async_mode:
            return self.request_api(
                url,
                data=data,
                files=payload_files,
                headers={
                    'x-api-key': self.API_KEY
                },
                async_mode=True,
                callback=callback
            )

        response = requests.post(
            url,
            headers={
                'x-api-key': self.API_KEY
            },
            data=payload,
            files=payload_files
        )
        
        if response.status_code != 200:
            raise Exception(f"Request failed with status code {response.status_code}")
        
        response_json = response.json()
        return ScannerResult(**response_json)
    
    def request_api(self,
        url: str,
        *,
        method: str = "POST",
        data: Optional[Union[Dict[str, Any], str]] = None,
        files: Optional[List[str]] = None,
        headers: Optional[Dict[str, str]] = None,
        timeout: Optional[float] = 10,
        async_mode: bool = False,
        callback: Optional[Callback] = None,
    ) -> Any:
        """
        Fetch *url* synchronously or asynchronously.
        If *callback* is given it will be invoked with the result:
            • sync branch  → called before returning
            • async branch → awaited (if coroutine) or run, then result returned
        """

        def _maybe_call(cb: Callback, result: Any) -> None:
            "Handle sync vs async callbacks transparently from either branch."
            if inspect.iscoroutinefunction(cb):
                # We’re in the sync branch → spin up a short event loop just for this.
                asyncio.run(cb(result))
            else:
                cb(result)

        async def _maybe_await(cb: Callback, result: Any) -> None:
            "Async version of _maybe_call."
            if inspect.iscoroutinefunction(cb):
                await cb(result)
            else:
                cb(result)

        if async_mode:                     # ---------- ASYNC branch ----------
            async def _coroutine() -> Any:
                async with httpx.AsyncClient() as client:
                    if files is None or len(files) == 0:
                        r = await client.request(method.upper(), url, data=data, headers=headers, timeout=timeout)
                    else:
                        files_to_send = [('metadata', (None, data))] + files
                        r = await client.request(
                            method.upper(),
                            url,
                            files=files_to_send,
                            headers=headers,
                            timeout=timeout,
                        )
                    
                    r.raise_for_status()
                    out = (
                        ScannerResult(**r.json())
                        if r.headers.get("Content-Type", "").startswith("application/json")
                        else r.text
                    )
                    if callback:
                        await _maybe_await(callback, out)
                    return out

            return _coroutine()            # caller must await

        # ---------- SYNC branch ----------
        with httpx.Client() as client:
            if files is None:
                r = client.request(method.upper(), url, data=data, headers=headers, timeout=timeout)
            else:
                r = client.request(method.upper(), url, data=data, files=files, headers=headers, timeout=timeout)
            r.raise_for_status()
            out = (
                r.json()
                if r.headers.get("Content-Type", "").startswith("application/json")
                else r.text
            )
            if callback:
                _maybe_call(callback, out)
            return out
        
    def fetch_image_results(self, image_file_names: List[str], download_dir: str):
        assert isinstance(image_file_names, list), "image_file_names must be a list of file names."
        if not image_file_names:
            raise ValueError("No image file names provided.")
        assert all(isinstance(name, str) for name in image_file_names), "All file names must be strings."

        if not os.path.exists(download_dir):
            os.makedirs(download_dir)
        
        url = f"{self.remote_addr}/guard/files"
        for fi, file_name in enumerate(image_file_names):
            response = requests.post(
                url,
                headers={'x-api-key': self.API_KEY},
                json={
                    "project_id": self.PROJECT_ID,
                    "file_name": file_name
                }
            )
            
            if response.status_code != 200:
                raise Exception(f"Failed to fetch image results: {response.status_code}")
        
            image_data = response.content
            file_path = os.path.join(download_dir, file_name)
            try:
                with open(file_path, 'wb') as f:
                    f.write(image_data)
            except Exception as e:
                raise Exception(f"Failed to save image {file_name}: {str(e)}")
            
class InputGuard(Guard):
    def __init__(self, API_KEY, PROJECT_ID, remote_addr=REMOTE_TS_API_ADDRESS, fail_fast=True):
        super().__init__(API_KEY, PROJECT_ID, remote_addr,fail_fast=fail_fast)
        self.remote_addr = remote_addr

    
    def scan(self, prompt: str, 
             files: List[str]=None, 
             is_async=False, callback: 
             Callback = None) -> Union[ScannerResult, Any]:
        if self.scanners is None or len(self.scanners) == 0:
            raise ValueError("No scanners have been added.")

        if not prompt and not files:
            raise ValueError("Either prompt or files must be provided for input scanning.")
        
        assert files is None or (isinstance(files, list) and all(isinstance(file, str) for file in files)), "Files must be a list of file paths."

        if files:
            files = list(set(files))
            scanners_dict, _= self._scanners_to_dict(self.scanners, request_only=True, multimodal=True)
            url = f'{self.remote_addr}/guard/image-input'
        else:
            scanners_dict, _ = self._scanners_to_dict(self.scanners, request_only=True, multimodal=False)
            url = f'{self.remote_addr}/guard/prompt-input'
        
        request_body = self._prepare_request_json(prompt, self.PROJECT_ID, scanners_dict)
        return self.make_request(json.dumps(request_body), url, files=files, async_mode=is_async, callback=callback)
    

class OutputGuard(InputGuard):
    def __init__(self, API_KEY, PROJECT_ID, remote_addr=REMOTE_TS_API_ADDRESS, fail_fast=True):
        super().__init__(API_KEY, PROJECT_ID, remote_addr,fail_fast=fail_fast)
        self.remote_addr = remote_addr
        
    def scan(
        self,
        prompt: Optional[str],
        output: Optional[str],
        is_async: bool = False,
        callback: Callback = None,
    ) -> Union[ScannerResult, Any]:
        if self.scanners is None or len(self.scanners) == 0:
            raise ValueError("No scanners have been added.")

        scanners_dict, requires_input_prompt = self._scanners_to_dict(self.scanners, request_only=True, multimodal=False)
        if requires_input_prompt and not prompt:
            raise ValueError(f"Input scanners {requires_input_prompt} require a input prompt along with LLM output for output scanning.")
        
        url = f'{self.remote_addr}/guard/prompt-output'
        
        request_body = self._prepare_request_json(prompt=prompt, project_id=self.PROJECT_ID, scanners=scanners_dict, output=output)
        
        return self.make_request(json.dumps(request_body), url, async_mode=is_async, callback=callback)
    